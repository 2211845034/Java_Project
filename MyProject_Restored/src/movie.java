import java.sql.*;
import javax.swing.JOptionPane;
import java.util.Vector; // <-- إضافة هذا
import javax.swing.DefaultComboBoxModel; // <-- إضافة هذا
import javaapplication4.JavaApplication4; 

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


public class movie extends javax.swing.JFrame {

    private int currentUserId;

    public movie(int userId) {
        initComponents();
        this.currentUserId = userId;
        System.out.println("Movie screen opened for User ID: " + currentUserId);
        populateComboBoxes(); // <-- إضافة هذا السطر هنا
    }
    // ... بقية الكلاس
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jComboBox4 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "MOVIE DETAILS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Algerian", 1, 36), new java.awt.Color(0, 204, 204))); // NOI18N
        jPanel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("SELECT MOVIE:");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setText("SELECT  THEATRE:");

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Robo 2", "sahoo", "arvandi sametha" }));

        jComboBox2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "srivishnu", "galaxy", "asscars", "PVR" }));

        jComboBox3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "7:00AM", "11:00AM", "2:00PM", "6:00PM", "9:00PM" }));

        jComboBox4.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "11-11-2018", "12-11-2018", "10-11-2018", "09-11-2018" }));
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel5.setText("SELECT DATE:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel3.setText("SELECT TIME:");

        jTextField1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        jButton1.setFont(new java.awt.Font("Algerian", 1, 24)); // NOI18N
        jButton1.setText("SUBMIT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel4.setText("NO OF TICKETS:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(190, 190, 190)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(74, 74, 74)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(206, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(60, 60, 60))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(jButton1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(209, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        workWithDatabase();
    }
//     public void workWithDatabase()
//    {
//         String a=(String) jComboBox1.getSelectedItem();
//       String b=(String) jComboBox2.getSelectedItem();
//        String e=(String) jComboBox3.getSelectedItem();
//        String f=(String) jComboBox4.getSelectedItem();
//       String d=jTextField1.getText();
//       
//        
//         Connection c=null;
//         Statement  s=null;
//         
//         ResultSet rs=null;
//         int flag=0;
//     
//        //if(!a.equals(""))
//         String N=jTextField1.getText();
//        int N1=Integer.parseInt(N);
//        int N2=N1;
//         N1*=100;
//       //new recepit(a,b,e,d,N1,f).setVisible(true);
//        
//      if(N2<10 && N2>0)
//        
//         {  
//             this.setVisible(false);  new recepit(a,b,e,d,N1,f).setVisible(true); 
//       
//         try
//   {
////       Class.forName("com.mysql.jdbc.Driver");
////       c=DriverManager.getConnection("jdbc:mysql://localhost/java_dbmovies","root","");
//       c=JavaApplication4.ConnecrDb();
//       s=c.createStatement();
//        b=(String) jComboBox2.getSelectedItem();
//       e=(String) jComboBox3.getSelectedItem();
//      String q1=b;
//       String q2=e;
//       rs=s.executeQuery("select tickets from table3 where theatre="+"'"+q1+"'"+" and shows="+"'"+q2+"'");
//      String bid=jTextField1.getText();
//      int id=Integer.parseInt(bid);
//      rs=s.executeQuery("select tickets from table3 where theatre="+"'"+q1+"'"+" and shows="+"'"+q2+"'");
//       while(rs.next())
//     {
//    String id1=rs.getString("tickets");
//     int id2=Integer.parseInt(id1);
//     
//     id2=id2-N2;
//     
//     s.executeUpdate("Update table3 set tickets="+id2+" where theatre="+"'"+q1+"'"+" and shows="+"'"+q2+"'");
//    }
//    //new recepit(a,b,e,d).setVisible(true);
//       while(rs.next())
//       {
//               String tickets1=rs.getString("tickets");
//               String q3 = tickets1;
//               
//               //jLabel5 = new javax.swing.JLabel("tickets available:"+"  "+q3);
//               
//         }
//              
//     
//      //rs.close;
//      //s.close;
//      //c.close;
//   }    
//         catch(SQLException e1) // كتلة catch للاستثناء الأول
//{
//    System.out.println(e1);
//}
//
//            
//         
//         
//        
//            
//         }
//             
//// TODO add your handling code here:
// ... داخل كلاس movie

public void workWithDatabase() {
    String movieName = (String) jComboBox1.getSelectedItem();
    String theatreName = (String) jComboBox2.getSelectedItem();
    String showTime = (String) jComboBox3.getSelectedItem();
    String showDate = (String) jComboBox4.getSelectedItem();
    String ticketsText = jTextField1.getText();
//    double pricePerTicket = 100.0; // افترضنا سعر التذكرة 100
//double totalPrice = numberOfTickets * pricePerTicket;

    int numberOfTickets = 0;
    try {
        numberOfTickets = Integer.parseInt(ticketsText);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Please enter a valid number for tickets.");
        return;
    }

    if (numberOfTickets < 1 || numberOfTickets > 9) {
        JOptionPane.showMessageDialog(this, "Number of tickets must be between 1 and 9.");
        return;
    }

    double pricePerTicket = 100.0; // افترضنا سعر التذكرة 100
    double totalPrice = numberOfTickets * pricePerTicket;

    Connection c = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    int showId = -1; // متغير لتخزين show_id من movies_inventory

    try {
        c = JavaApplication4.ConnecrDb();
        if (c == null) {
            JOptionPane.showMessageDialog(this, "Failed to connect to database. Please try again.");
            System.err.println("Database connection not established. Booking not saved.");
            return;
        }

        // 1. البحث عن show_id وعدد التذاكر المتبقية من movies_inventory
        // استخدام الأعمدة الصحيحة: movie_name, theatre, shows, show_date
        String selectShowSql = "SELECT `show_id`, `tickets` FROM `movies_inventory` WHERE `movie_name` = ? AND `theatre` = ? AND `shows` = ? AND `show_date` = ?";
        pst = c.prepareStatement(selectShowSql);
        pst.setString(1, movieName);
        pst.setString(2, theatreName);
        pst.setString(3, showTime);
        pst.setString(4, showDate);
        rs = pst.executeQuery();

        int currentAvailableTickets = 0;
        if (rs.next()) {
            showId = rs.getInt("show_id");
            currentAvailableTickets = rs.getInt("tickets");
        } else {
            // إذا لم يتم العثور على العرض، لا يمكن الحجز
            JOptionPane.showMessageDialog(this, "Selected movie show not found or no tickets available for this specific combination. Please choose another option.");
            System.err.println("Movie show not found in movies_inventory: " + movieName + ", " + theatreName + ", " + showTime + ", " + showDate);
            return;
        }
        if (rs != null) rs.close(); // إغلاق ResultSet بعد الانتهاء منه

        // التحقق من توافر التذاكر
        if (numberOfTickets > currentAvailableTickets) {
            JOptionPane.showMessageDialog(this, "Not enough tickets available. Only " + currentAvailableTickets + " tickets remaining for " + movieName + " at " + theatreName + " " + showTime + " on " + showDate + ".");
            return;
        }

        // 2. تحديث عدد التذاكر المتبقية في movies_inventory
        // استخدام show_id للتحديث لضمان التحديث الصحيح
        String updateTicketsSql = "UPDATE `movies_inventory` SET `tickets` = ? WHERE `show_id` = ?";
        pst = c.prepareStatement(updateTicketsSql);
        pst.setInt(1, currentAvailableTickets - numberOfTickets);
        pst.setInt(2, showId);
        pst.executeUpdate();

        // 3. إدخال تفاصيل الحجز كسجل جديد في جدول `bookings`
        // هذا هو الاستعلام الصحيح لجدول bookings
String insertBookingSql = "INSERT INTO `bookings` (`user_id`, `show_id`, `number_of_tickets_booked`, `total_price`) VALUES (?, ?, ?, ?)";
pst = c.prepareStatement(insertBookingSql, Statement.RETURN_GENERATED_KEYS);

pst.setInt(1, currentUserId);
pst.setInt(2, showId);
pst.setInt(3, numberOfTickets);
pst.setDouble(4, totalPrice);

int rowsAffected = pst.executeUpdate();

int bookingId = -1;
if (rowsAffected > 0) {
    ResultSet generatedKeys = pst.getGeneratedKeys();
    if (generatedKeys.next()) {
        bookingId = generatedKeys.getInt(1);
    }
} else {
    JOptionPane.showMessageDialog(this, "Failed to record booking details. Please try again.");
    return;
}

// إذا وصلنا هنا بنجاح، نفتح صفحة الإيصال مع معرف الحجز
this.setVisible(false);
new recepit(bookingId, movieName, theatreName, showTime, ticketsText, totalPrice, showDate).setVisible(true);

// لو لديك معرف الحجز (bookingId) متوفر، تمرره كذلك
new recepit(bookingId, movieName, theatreName, showTime, ticketsText, totalPrice, showDate).setVisible(true);

            System.out.println("Booking successfully recorded in 'bookings' table and tickets updated in 'movies_inventory'.");
//        } else {
//            JOptionPane.showMessageDialog(this, "Failed to record booking details. Please try again.");
//            System.err.println("Failed to record booking details in 'bookings' table.");
//        }

    } catch (SQLException e1) {
        JOptionPane.showMessageDialog(this, "Database error: " + e1.getMessage());
        System.err.println("Database error during booking process: " + e1.getMessage());
        e1.printStackTrace();
    } finally {
        // تأكد من إغلاق الموارد دائمًا في كتلة finally
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (c != null) c.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }



    }//GEN-LAST:event_jButton1ActionPerformed
// ... داخل كلاس movie
private void populateComboBoxes() {
    Connection c = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    try {
        c = JavaApplication4.ConnecrDb();
        if (c == null) {
            System.err.println("Failed to connect to database for populating combo boxes.");
            return;
        }

        // ملء jComboBox1 (Movies)
        Vector<String> movieNames = new Vector<>();
        pst = c.prepareStatement("SELECT DISTINCT `movie_name` FROM `movies_inventory` ORDER BY `movie_name`");
        rs = pst.executeQuery();
        while (rs.next()) {
            movieNames.add(rs.getString("movie_name"));
        }
        jComboBox1.setModel(new DefaultComboBoxModel<>(movieNames));
        if (rs != null) rs.close();
        if (pst != null) pst.close();


        // ملء jComboBox2 (Theatres)
        Vector<String> theatreNames = new Vector<>();
        pst = c.prepareStatement("SELECT DISTINCT `theatre` FROM `movies_inventory` ORDER BY `theatre`");
        rs = pst.executeQuery();
        while (rs.next()) {
            theatreNames.add(rs.getString("theatre"));
        }
        jComboBox2.setModel(new DefaultComboBoxModel<>(theatreNames));
        if (rs != null) rs.close();
        if (pst != null) pst.close();

        // ملء jComboBox3 (Show Times)
        Vector<String> showTimes = new Vector<>();
        pst = c.prepareStatement("SELECT DISTINCT `shows` FROM `movies_inventory` ORDER BY `shows`");
        rs = pst.executeQuery();
        while (rs.next()) {
            showTimes.add(rs.getString("shows"));
        }
        jComboBox3.setModel(new DefaultComboBoxModel<>(showTimes));
        if (rs != null) rs.close();
        if (pst != null) pst.close();

        // ملء jComboBox4 (Show Dates)
        Vector<String> showDates = new Vector<>();
        pst = c.prepareStatement("SELECT DISTINCT `show_date` FROM `movies_inventory` ORDER BY `show_date`");
        rs = pst.executeQuery();
        while (rs.next()) {
            showDates.add(rs.getString("show_date"));
        }
        jComboBox4.setModel(new DefaultComboBoxModel<>(showDates));
        if (rs != null) rs.close();
        if (pst != null) pst.close();

    } catch (SQLException e) {
        System.err.println("Error populating combo boxes: " + e.getMessage());
        e.printStackTrace();
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (c != null) c.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(movie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(movie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(movie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(movie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new movie().setVisible(true);
                  new movie(-1).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
